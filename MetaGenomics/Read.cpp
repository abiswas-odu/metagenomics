/*
 * Read.cpp
 *
 * Created on: April 22, 2013
 * Author: Md. Bahlul Haider
 */

#include "Common.h"
#include "Read.h"



/**********************************************************************************************************************
	Default constructor
**********************************************************************************************************************/
Read::Read(void)
{
	// Initialize the variables.
	readNumber = 0;
	superReadID = 0;
	read = new dna_bitset();
	fileIndex=0;
}

/**********************************************************************************************************************
	Another constructor
**********************************************************************************************************************/
Read::Read(const string & s, UINT64 fIndx)
{
	// Initialize the variables.
	read = new dna_bitset(s, s.length());
	readNumber = 0;
	superReadID = 0;
	fileIndex=fIndx;
}

/**********************************************************************************************************************
	Default destructor
**********************************************************************************************************************/
Read::~Read(void)
{
	// delete all the pointers.
	if(read)
		delete read;
}
/**********************************************************************************************************************
	Destroy read sequence data
**********************************************************************************************************************/
void Read::freeBitSet()
{
	// delete the read pointer and set to NULL.
	delete read;
	read=NULL;
}
/**********************************************************************************************************************
	Function to store the read.
**********************************************************************************************************************/
bool Read::setRead(const string & s)
{
	dna_bitset *tmpRead = new dna_bitset(s, s.length());
	delete read;
	read=NULL;
	read = tmpRead;
	return true;
}
/**********************************************************************************************************************
	This function assigns an ID to the read.
**********************************************************************************************************************/
bool Read::setReadNumber(UINT64 id)
{
	if(id <= 0) MYEXIT("ID less than 1.");
	readNumber = id;												// Set the read number.
	return true;
}
/**********************************************************************************************************************
	This function assigns an ID to the read.
**********************************************************************************************************************/
void Read::setFileIndex(UINT64 id)
{
	if(id <= 0) MYEXIT("ID less than 1.");
	fileIndex = id;												// Set the read number.
}
/**********************************************************************************************************************
	Returns the reverse complement of a read.
**********************************************************************************************************************/

void Read::setReadHashOffset(UINT64 offset)
{
	readHashOffset=offset;
}




